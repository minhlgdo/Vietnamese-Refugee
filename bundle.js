(function (d3$1, topojson) {
  'use strict';

  const loadAndProcessData = (year) =>
    Promise.all([
      d3$1.tsv(
        'https://unpkg.com/world-atlas@1.1.4/world/50m.tsv'
      ),
      d3$1.json(
        'https://unpkg.com/world-atlas@1.1.4/world/50m.json'
      ),
      d3$1.csv('https://gist.githubusercontent.com/minhlgdo/8682d962cb22c947d2f8a5fe6db52d6a/raw/934d881363e25991ffce29b4e36de3aa8ea691f7/final_data.csv')
    ])
  	.then(([tsvData, topoJSONdata, csvData]) => {
      const rowById = tsvData.reduce((accumulator, d) => {
        // copy all the names of the country
        accumulator[d.iso_n3] = d;
        return accumulator;
      }, {});
      
      const dataById = csvData.reduce((accumulator, data) => {
        if (+data["Year"] === year) {
          accumulator[data.id] = data;
        	// accumulator[data["Country of asylum"]] = data;
        	// accumulator[data["Year"]] = data;
        } 
        return accumulator;
      }, {});
      
        /*
      const countryName = {};
      csvData.forEach(d => {
        countryName[d.iso_n3] = d.name;
      });
      */

      const countries = topojson.feature(
        topoJSONdata,
        topoJSONdata.objects.countries
      );

      countries.features.forEach((d) => {
        // Assign properties
        Object.assign(d.properties, rowById[d.id]);
        Object.assign(d.properties, dataById[d.id]);
      });
      
      return countries;
    });

  const worldMap = (year, option) => {
  	console.log("World Map:", year, option);
    const svg = d3$1.select('svg');
    

    const projection = d3$1.geoNaturalEarth1();
    const pathGenerator = d3$1.geoPath().projection(projection);
    
  	svg.selectAll("*").remove();
    const g = svg.append('g');
    

    g.append('path')
      .attr('class', 'sphere')
      .attr('d', pathGenerator({ type: 'Sphere' }));

    svg.call(
      d3$1.zoom().on('zoom', () => {
        g.attr('transform', d3$1.event.transform);
      })
    );
    
    // const option = "Refugees under UNHCR's mandate";

    const colorScale = d3$1.scaleOrdinal();
    const colorValue = (d) => {
      if (d['properties'][option] == null)
        d['properties'][option] = 0;
      return +d['properties'][option];
    };

    loadAndProcessData(year).then((countries) => {
      // console.log(countries.features);
      // console.log(schemeRdYlGn[colorScale.domain().length]);
      if (colorScale.domain(colorScale.domain()).length != 0) ;
      // if (colorScale.domain() != 0) {
      //   colorScale
      //   .domain(countries.features.map(colorValue))
      //   .domain(colorScale.domain())
      //   .range(schemeRdYlGn[colorScale.domain().length]);
      // }
  		
      colorScale
        .domain(countries.features.map(colorValue))
        .domain(colorScale.domain());
      console.log(d3$1.schemeRdYlGn[colorScale.domain().length]);
      
      if (d3$1.schemeRdYlGn[colorScale.domain().length] != null) {
        colorScale.range(d3$1.schemeRdYlGn[colorScale.domain().length]);
      } else {
        colorScale.range(d3$1.schemeRdYlGn[6]);
      }
      
      // colorScale.range(schemeRdYlGn[colorScale.domain().length]);
      
      
      

      // console.log(countries.features.map(colorValue));

      const showInfo = (d) => {
        if (d['properties']['Year'] != null) {
          return (
            '\n' + option + ': ' + d['properties'][option]
          );
        }
        return '\nNo data';
      };

      g.selectAll('path')
        .data(countries.features)
        .enter()
        .append('path')
        .attr('class', 'country')
        .attr('d', pathGenerator)
        .attr('fill', function (d) {
          if (
            d['properties']['Year'] != null &&
            +d['properties'][option] > 0
          ) {
            return colorScale(colorValue(d));
          }
          return '#dbdbdb';
        })
        .append('title')
        .text((d) => d.properties.name + showInfo(d));
    });
    
    return svg; 
  };

  var options = ["Refugees under UNHCR's mandate", "Returned refugees", "Resettlement arrivals"];

  var years = [];
  for (var i = 1975; i <= 1995; i++) {
      years.push(i);
  }

  d3.select("#year_menu") // adding year values in year filter
  		.selectAll('myOptions')
  		.data(years)
  		.enter()
  		.append('option')
  		.text(function (d) { return d; }) 
  		.attr("value", function (d) { return d; });

  d3.select("#view_menu") // adding categorical  values in view filter
  		.selectAll('myOptions')
  		.data(options)
  		.enter()
  		.append('option')
  		.text(function (d) { return d; }) 
  		.attr("value", function (d) { return d; });

  worldMap(1975, "Refugees under UNHCR's mandate");

  // on categorical values in view filter
  d3.select("#view_menu")
  		.on("change", function(d){
  			const selectedViewOption = d3.select(this).property("value");
    		console.log(selectedViewOption);
        const selectedYearOption = d3.select("#year_menu").property("value");
    		console.log(selectedYearOption);
  			worldMap(parseInt(selectedYearOption), selectedViewOption);
  		});

  d3.select("#year_menu")
  		.on("change", function(d){
  			const selectedViewOption = d3.select("#view_menu").property("value");
    		console.log(selectedViewOption);
        const selectedYearOption = d3.select(this).property("value");
    		console.log(selectedYearOption);
  			worldMap(parseInt(selectedYearOption), selectedViewOption);
  		});

}(d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,